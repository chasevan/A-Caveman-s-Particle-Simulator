
"""
***test***
class swag:
    i = 54321
    def f(self):
        return "hello world"
x = swag()
print(x.i)
print(x.f())
"""
import numpy as np
#create box of independent moving objects
#def rotate_vector(vector, angle):
all_positions = [0,0,0]
# def new_vel()
class Ball:
    def __init__(self, mass, radius, position, velocity, step):
        
        self.mass = mass
        self.radius = radius
        self.position = position
        self.velocity = velocity

    def iteration(self, step, position, velocity):
        #step = seconds per iteration
        #velocity = meters per second
        move = step*velocity #meters moved depends on the velocity of the respective component
        new_position = np.add(position, move)
        #set up boundaries
        all_positions = [ float(new_position[0]), float(new_position[1]), float(new_position[2]) ] 
        print([ float(new_position[0]), float(new_position[1]), float(new_position[2]) ] )
        '''
        check the x, y, and z components of current position for 
        whether the new position of the ball exeeds the boundaries, and if 
        so, change the velocity direction to simulate a bounce off of the 
        boundary            
        '''
        for position_comp in np.array(all_positions):
            if position_comp >= 10:
                ind = all_positions.index(position_comp) #index of value that broke the boundary
                self.velocity[ind] = -velocity[ind] #flip velocity to simulate elastic bouncing
            if position_comp <= -10:
                ind = all_positions.index(position_comp) #index of x y or z value that exited bounds
                self.velocity[ind] = -velocity[ind] #flip velocity to simulate elastic bouncing
                #print(all_positions >= 10, all_positions <= -10)
            
                '''
                ***first attempt at the simulation iterations***
                #x boundary
                if new_position[0] >= 10 or new_position[0] <= -10:
                    self.velocity[0] = -(velocity[0])
    
                #y boundary
                if new_position[1] >= 10 or new_position[1] <= -10:
                    self.velocity[1] = -(velocity[1])
                #z boundary
                if new_position[2] >= 10 or new_position[2] <= -10:
                    print(new_position[2],"true")
                    self.velocity[2] = -(velocity[2])
                else:
                    print(new_position[2], " is <10 and >-10")
                '''
            #print(new_position, self.velocity)
        self.position = new_position
        return self.position, self.velocity, all_positions
    def ball_collision(self, anotherball ):
        #momentum1 = self.mass
        return
    
#if two particles are within 1 unit of each other, run a collision event
'''
define event that takes the stored coordinates at a single moment in time, 
and the vector velocities of each particle.
    calculate angle at which particles A and B would collide using:
        theta = arctan( (ya - yb)/(xa - xb) )
    Calculate projected velocies after collision using momentum relationships, and the angle theta:
        initial momentum in x direction = (massA * xvecolity_of_A) + (massB * xvelocity_of_B)
        old_velocity = x_velocity 
        
        x_velocity = 
        
'''
#velocity_b2x = ( ( mass_a*velocity_a1x + mass_b*velocity_b1x ) - mass_a*velocity_a2x )/ mass_b

#randomly generate balls with associated properties

ball1 = Ball(mass = 1, radius = 0.5, position = [4,1,0], velocity = np.array([2,2,1]), step = 0.1 )


#print( ball1.iteration(0.1, ball1.position, ball1.velocity) )
def simulation(balls):
    i=0
    while i < 20:
        balls.iteration(1, balls.position, balls.velocity)
        i+=1;
simulation(ball1)
